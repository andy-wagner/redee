/* The following code was generated by JFlex 1.4.3 on 08.01.18 15:16 */

package jflex; 

import java.io.StringReader;
import java.io.IOException;
import java.util.Iterator;
import java.lang.NullPointerException;

import java.lang.UnsupportedOperationException;
import java.util.NoSuchElementException;
import com.scout24.redee.extraction.jflex.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08.01.18 15:16 from the specification file
 * <tt>/Users/dprawdzik/#Projects/Hackday/2018.Q1/0-Software/redee/redee-core/src/main/resources/jflex/Tokenizer.jflex</tt>
 */
public class Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\35\1\0\1\35\1\35\22\0\1\24\1\67\1\65"+
    "\1\62\1\0\1\45\1\46\1\40\2\0\1\0\1\0\1\66\1\42"+
    "\1\34\1\51\1\60\1\55\1\57\6\36\1\56\1\44\1\43\1\63"+
    "\1\47\1\64\1\50\1\45\1\52\1\12\1\12\1\22\1\12\1\27"+
    "\1\12\1\12\1\12\1\33\1\12\1\12\1\30\1\54\1\53\1\12"+
    "\1\12\1\12\1\23\1\12\1\12\3\12\1\12\1\12\4\0\1\41"+
    "\1\0\1\20\1\14\1\12\1\12\1\11\1\5\1\7\1\26\1\2"+
    "\1\12\1\31\1\3\1\1\1\4\1\6\1\21\1\61\1\16\1\25"+
    "\1\17\1\13\1\10\2\12\1\12\1\15\50\0\1\0\3\0\1\0"+
    "\30\0\27\32\1\0\37\32\1\0\112\32\1\32\u051d\32\12\37\206\32"+
    "\12\37\u026c\32\12\37\166\32\12\37\166\32\12\37\166\32\12\37\166\32"+
    "\12\37\167\32\11\37\166\32\12\37\166\32\12\37\166\32\12\37\340\32"+
    "\12\37\166\32\12\37\u0166\32\12\37\u0fb6\32\254\0\1\0\u0f93\0\u0150\32"+
    "\u0170\0\200\32\200\0\u092e\32\u10d2\0\u5200\32\u5900\0\u0200\32\u0500\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\1\3\4\2\1\4\1\1\1\2"+
    "\1\5\1\1\3\2\1\1\2\2\1\6\1\7\3\0"+
    "\10\2\3\0\1\7\1\0\1\2\4\0\3\2\2\0"+
    "\1\6\3\0\1\2\1\10\7\2\3\0\1\7\1\11"+
    "\1\2\1\3\3\0\3\2\1\12\2\7\1\13\1\2"+
    "\3\0\1\2\1\0\1\2\1\0\1\2\2\0\1\3"+
    "\2\0\3\2\2\12\1\13\1\0\2\2\1\0\1\2"+
    "\1\0\1\12\3\0\1\14\1\0\2\2\1\0\1\2"+
    "\2\0\1\12\1\0\1\15\1\2\3\0\2\12\1\0"+
    "\1\2\1\16\1\0\1\12\1\2\1\0\1\12\1\2"+
    "\2\16\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\70\0\u0268\0\u02a0\0\70\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u03b8\0\u04d0\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\70\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0460\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8"+
    "\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1298\0\70\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\70\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0"+
    "\0\u1a08\0\70\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u0508\0\u0f88\0\u1b90";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\14\3\1\5\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\2\3\1\13\1\14\1\7\1\15"+
    "\1\16\1\17\1\2\3\17\1\2\1\20\1\2\1\14"+
    "\1\2\1\21\1\22\1\23\4\15\1\3\1\2\1\24"+
    "\2\2\1\17\1\14\71\0\23\25\1\0\1\26\6\25"+
    "\1\27\1\0\1\30\1\25\1\31\1\32\1\33\7\0"+
    "\3\25\4\30\1\25\7\0\16\25\1\34\4\25\1\0"+
    "\1\26\6\25\1\27\1\0\1\30\1\25\1\31\1\32"+
    "\1\33\7\0\3\25\4\30\1\25\7\0\10\25\1\35"+
    "\12\25\1\0\1\26\6\25\1\27\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\10\25\1\36\12\25\1\0\1\26\6\25\1\27\1\0"+
    "\1\30\1\25\1\31\1\32\1\33\7\0\3\25\4\30"+
    "\1\25\32\0\1\7\10\0\1\7\33\0\16\25\1\37"+
    "\4\25\1\0\1\26\6\25\1\27\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\10\25\1\40\12\25\1\0\1\26\6\25\1\27\1\0"+
    "\1\30\1\25\1\31\1\32\1\33\7\0\3\25\4\30"+
    "\1\25\7\0\17\25\1\41\3\25\1\0\1\26\6\25"+
    "\1\27\1\0\1\30\1\25\1\31\1\32\1\33\7\0"+
    "\3\25\4\30\1\25\7\0\12\25\1\42\4\25\1\43"+
    "\3\25\1\0\1\26\6\25\1\27\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\23\30\1\44\7\30\1\45\1\44\1\46\1\47\1\0"+
    "\2\32\3\0\1\50\3\0\3\30\4\46\1\30\7\0"+
    "\23\25\1\44\1\26\6\25\1\27\1\44\1\47\1\51"+
    "\1\31\1\32\1\33\3\0\1\50\3\0\3\25\4\47"+
    "\1\25\7\0\2\52\1\53\14\52\1\54\3\52\1\0"+
    "\5\52\1\0\1\52\2\0\1\52\13\0\7\52\1\55"+
    "\1\52\6\0\12\25\1\56\10\25\1\0\1\26\6\25"+
    "\1\27\1\0\1\30\1\25\1\31\1\32\1\33\7\0"+
    "\3\25\4\30\1\25\7\0\23\25\1\0\1\26\3\25"+
    "\1\57\2\25\1\27\1\0\1\30\1\25\1\31\1\32"+
    "\1\33\7\0\3\25\4\30\1\25\7\0\5\25\1\60"+
    "\15\25\1\0\1\26\6\25\1\27\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\23\61\1\0\5\61\1\0\1\61\2\0\1\61\10\0"+
    "\1\61\1\0\1\62\10\61\7\0\23\25\1\0\1\26"+
    "\6\25\1\45\1\0\1\30\1\25\1\31\1\32\1\33"+
    "\7\0\3\25\4\30\1\25\7\0\23\25\1\0\1\26"+
    "\6\25\1\45\1\0\1\30\1\25\1\63\1\32\1\33"+
    "\7\0\3\25\4\30\1\25\7\0\23\64\1\0\7\64"+
    "\2\0\1\32\1\64\12\0\3\64\4\32\1\64\7\0"+
    "\23\30\1\0\7\30\1\45\1\0\2\30\1\65\1\32"+
    "\1\66\7\0\10\30\7\0\23\67\1\0\7\67\3\0"+
    "\1\67\12\0\3\67\4\0\1\67\7\0\23\32\1\0"+
    "\7\32\1\45\1\0\2\32\1\0\2\32\7\0\10\32"+
    "\7\0\23\70\1\0\7\70\1\45\1\0\1\66\1\70"+
    "\1\0\2\32\7\0\3\70\4\66\1\70\7\0\20\25"+
    "\1\71\2\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\7\0\14\25\1\72\6\25\1\0\1\26\6\25\1\45"+
    "\1\0\1\30\1\25\1\31\1\32\1\33\7\0\3\25"+
    "\4\30\1\25\7\0\20\25\1\73\2\25\1\0\1\26"+
    "\6\25\1\45\1\0\1\30\1\25\1\31\1\32\1\33"+
    "\7\0\3\25\4\30\1\25\7\0\16\25\1\74\4\25"+
    "\1\0\1\26\6\25\1\45\1\0\1\30\1\25\1\31"+
    "\1\32\1\33\7\0\3\25\4\30\1\25\7\0\13\25"+
    "\1\75\7\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\7\0\1\25\1\76\21\25\1\0\1\26\6\25\1\45"+
    "\1\0\1\30\1\25\1\31\1\32\1\33\7\0\3\25"+
    "\4\30\1\25\7\0\2\25\2\41\17\25\1\0\1\26"+
    "\6\25\1\45\1\0\1\30\1\25\1\31\1\32\1\33"+
    "\7\0\3\25\4\30\1\25\7\0\3\25\1\77\17\25"+
    "\1\0\1\26\6\25\1\45\1\0\1\30\1\25\1\31"+
    "\1\32\1\33\7\0\3\25\4\30\1\25\32\0\1\44"+
    "\10\0\1\44\10\0\1\50\22\0\23\100\1\0\7\100"+
    "\2\0\1\32\1\100\12\0\3\100\4\32\1\100\7\0"+
    "\23\30\1\44\7\30\1\101\1\44\1\102\1\103\1\0"+
    "\2\32\3\0\1\50\3\0\3\30\4\102\1\30\7\0"+
    "\23\30\1\44\7\30\1\101\1\44\2\103\1\65\1\32"+
    "\1\66\3\0\1\50\3\0\3\30\4\103\1\30\32\0"+
    "\1\50\10\0\1\50\2\104\15\0\4\104\10\0\23\25"+
    "\1\44\1\26\6\25\1\101\1\44\1\103\1\105\1\31"+
    "\1\32\1\33\3\0\1\50\3\0\3\25\4\103\1\25"+
    "\7\0\23\52\1\0\5\52\1\0\1\52\2\0\1\52"+
    "\4\0\1\106\6\0\11\52\6\0\16\52\1\107\4\52"+
    "\1\0\5\52\1\0\1\52\2\0\1\52\4\0\1\106"+
    "\6\0\11\52\6\0\1\110\22\52\1\0\5\52\1\0"+
    "\1\52\2\0\1\52\4\0\1\106\6\0\11\52\6\0"+
    "\12\52\1\111\10\52\1\0\5\52\1\0\1\52\2\0"+
    "\1\52\4\0\1\106\6\0\11\52\6\0\6\25\1\112"+
    "\14\25\1\0\1\26\6\25\1\45\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\16\25\1\113\4\25\1\0\1\26\6\25\1\45\1\0"+
    "\1\30\1\25\1\31\1\32\1\33\7\0\3\25\4\30"+
    "\1\25\7\0\7\25\1\114\13\25\1\0\1\26\6\25"+
    "\1\45\1\0\1\30\1\25\1\31\1\32\1\33\7\0"+
    "\3\25\4\30\1\25\7\0\23\61\1\0\5\61\1\0"+
    "\1\61\2\0\1\61\10\0\1\61\2\0\10\61\2\0"+
    "\1\106\4\0\23\115\1\0\7\115\1\116\1\0\1\32"+
    "\1\115\1\0\2\32\7\0\3\115\4\32\1\115\7\0"+
    "\23\117\1\0\7\117\3\0\1\117\12\0\3\117\4\0"+
    "\1\117\7\0\23\120\1\0\7\120\1\45\1\0\1\66"+
    "\1\120\1\0\2\32\7\0\3\120\4\66\1\120\7\0"+
    "\23\67\1\0\1\121\6\67\2\0\1\117\1\67\1\31"+
    "\1\0\1\122\7\0\3\67\4\117\1\67\7\0\23\70"+
    "\1\0\7\70\1\45\1\0\1\120\1\70\1\123\1\32"+
    "\1\33\7\0\3\70\4\120\1\70\7\0\23\25\1\0"+
    "\1\26\6\25\1\45\1\0\1\30\1\25\1\31\1\32"+
    "\1\33\1\0\1\124\5\0\3\25\4\30\1\25\7\0"+
    "\10\25\1\125\12\25\1\0\1\26\6\25\1\126\1\0"+
    "\1\30\1\25\1\31\1\32\1\33\7\0\3\25\4\30"+
    "\1\25\7\0\16\25\1\114\4\25\1\0\1\26\6\25"+
    "\1\45\1\0\1\30\1\25\1\31\1\32\1\33\7\0"+
    "\3\25\4\30\1\25\7\0\20\25\1\127\2\25\1\0"+
    "\1\26\6\25\1\45\1\0\1\30\1\25\1\31\1\32"+
    "\1\33\7\0\3\25\4\30\1\25\7\0\15\25\1\77"+
    "\5\25\1\0\1\26\6\25\1\126\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\23\25\1\130\1\26\6\25\1\45\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\12\25\1\131\10\25\1\0\1\26\6\25\1\45\1\0"+
    "\1\30\1\25\1\31\1\32\1\33\7\0\3\25\4\30"+
    "\1\25\7\0\23\115\1\0\7\115\1\45\1\0\1\32"+
    "\1\115\1\0\2\32\7\0\3\115\4\32\1\115\7\0"+
    "\23\100\1\0\7\100\2\0\1\132\1\133\12\0\3\100"+
    "\4\132\1\100\7\0\23\30\1\44\7\30\1\45\1\44"+
    "\1\102\1\103\1\0\2\32\3\0\1\50\3\0\3\30"+
    "\4\102\1\30\7\0\23\30\1\44\7\30\1\45\1\44"+
    "\2\103\1\65\1\32\1\66\3\0\1\50\3\0\3\30"+
    "\4\103\1\30\44\0\2\104\15\0\4\104\10\0\23\25"+
    "\1\44\1\26\6\25\1\45\1\44\1\103\1\105\1\31"+
    "\1\32\1\33\3\0\1\50\3\0\3\25\4\103\1\25"+
    "\7\0\23\52\1\0\5\52\1\0\1\52\2\0\1\52"+
    "\4\0\1\134\6\0\11\52\6\0\20\52\1\135\2\52"+
    "\1\0\5\52\1\0\1\52\2\0\1\52\4\0\1\106"+
    "\6\0\11\52\6\0\5\52\1\136\15\52\1\0\5\52"+
    "\1\0\1\52\2\0\1\52\4\0\1\106\6\0\11\52"+
    "\6\0\12\25\1\137\10\25\1\0\1\26\6\25\1\126"+
    "\1\0\1\30\1\25\1\31\1\32\1\33\7\0\3\25"+
    "\4\30\1\25\7\0\5\25\1\140\15\25\1\0\1\26"+
    "\6\25\1\126\1\0\1\30\1\25\1\31\1\32\1\33"+
    "\7\0\3\25\4\30\1\25\7\0\10\25\1\141\12\25"+
    "\1\0\1\26\6\25\1\126\1\0\1\30\1\25\1\31"+
    "\1\32\1\33\7\0\3\25\4\30\1\25\7\0\23\115"+
    "\1\0\7\115\1\142\1\0\2\115\1\0\1\115\1\32"+
    "\7\143\10\115\7\0\23\117\1\0\7\117\2\0\2\117"+
    "\1\65\1\0\1\122\7\0\10\117\7\0\23\120\1\0"+
    "\7\120\1\45\1\0\2\120\1\123\1\32\1\66\7\0"+
    "\10\120\7\0\23\67\1\0\1\121\6\67\2\0\1\117"+
    "\1\67\1\63\1\0\1\122\7\0\3\67\4\117\1\67"+
    "\7\0\23\144\1\0\7\144\2\0\1\122\1\144\12\0"+
    "\3\144\4\122\1\144\7\0\23\144\1\0\7\144\3\0"+
    "\1\144\12\0\3\144\4\0\1\144\57\0\1\145\17\0"+
    "\1\146\22\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\7\0\23\100\1\130\7\100\2\0\1\32\1\100\12\0"+
    "\3\100\4\32\1\100\7\0\23\25\1\0\1\147\6\25"+
    "\1\45\1\0\1\30\1\25\1\31\1\32\1\33\1\0"+
    "\1\124\5\0\3\25\4\30\1\25\44\0\2\150\15\0"+
    "\4\150\10\0\17\25\1\151\3\25\1\0\1\26\6\25"+
    "\1\45\1\0\1\30\1\25\1\31\1\32\1\33\7\0"+
    "\3\25\4\30\1\25\7\0\23\32\1\0\7\32\1\45"+
    "\1\0\2\152\1\0\2\32\7\0\3\32\4\152\1\32"+
    "\7\0\23\115\1\0\7\115\1\45\1\0\1\152\1\153"+
    "\1\0\2\32\7\0\3\115\4\152\1\115\7\0\23\154"+
    "\1\0\5\154\1\0\1\154\2\0\1\154\7\0\1\155"+
    "\1\154\1\0\1\156\10\154\3\0\1\154\3\0\23\52"+
    "\1\0\5\52\1\0\1\52\2\0\1\52\4\0\1\157"+
    "\6\0\11\52\6\0\16\52\1\160\4\52\1\0\5\52"+
    "\1\0\1\52\2\0\1\52\4\0\1\106\6\0\11\52"+
    "\6\0\23\25\1\0\1\161\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\7\0\13\25\1\162\7\25\1\0\1\26\6\25\1\45"+
    "\1\0\1\30\1\25\1\31\1\32\1\33\7\0\3\25"+
    "\4\30\1\25\7\0\1\140\22\25\1\0\1\26\6\25"+
    "\1\45\1\0\1\30\1\25\1\31\1\32\1\33\7\0"+
    "\3\25\4\30\1\25\7\0\23\115\1\0\7\115\1\143"+
    "\1\0\2\115\1\0\1\143\1\0\7\143\10\115\7\0"+
    "\23\143\1\0\10\143\1\0\2\143\1\0\1\143\1\0"+
    "\17\143\7\0\23\144\1\0\7\144\2\0\2\144\1\123"+
    "\1\0\1\122\7\0\10\144\57\0\1\163\17\0\13\25"+
    "\1\164\7\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\7\0\23\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\63\1\32\1\33\1\0\1\124\5\0\3\25"+
    "\4\30\1\25\44\0\2\165\15\0\4\165\10\0\15\25"+
    "\1\76\5\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\7\0\23\32\1\0\7\32\1\166\1\0\2\32\1\0"+
    "\2\32\7\0\10\32\7\0\23\115\1\0\7\115\1\167"+
    "\1\0\2\115\1\0\1\115\1\32\7\143\10\115\7\0"+
    "\23\154\1\0\5\154\1\0\1\154\2\0\1\154\7\0"+
    "\1\155\1\154\2\0\10\154\3\0\1\154\11\0\1\170"+
    "\61\0\23\52\1\0\5\52\1\0\1\52\2\0\1\52"+
    "\4\0\1\171\6\0\11\52\6\0\16\25\1\76\4\25"+
    "\1\0\1\26\6\25\1\45\1\0\1\30\1\25\1\63"+
    "\1\32\1\33\7\0\3\25\4\30\1\25\7\0\10\25"+
    "\1\151\12\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\7\0\23\32\1\0\7\32\2\0\2\32\12\0\10\32"+
    "\7\0\10\25\1\172\12\25\1\0\1\26\6\25\1\45"+
    "\1\0\1\30\1\25\1\31\1\32\1\33\7\0\3\25"+
    "\4\30\1\25\44\0\2\173\15\0\4\173\10\0\23\100"+
    "\1\0\7\100\2\0\1\32\1\100\12\0\3\100\1\174"+
    "\1\32\1\175\1\32\1\100\7\0\23\115\1\0\7\115"+
    "\1\143\1\0\2\115\1\0\1\143\1\0\7\143\3\115"+
    "\1\176\1\115\1\177\2\115\25\0\1\200\51\0\15\25"+
    "\1\201\5\25\1\0\1\26\6\25\1\45\1\0\1\30"+
    "\1\25\1\31\1\32\1\33\7\0\3\25\4\30\1\25"+
    "\44\0\2\202\15\0\4\202\10\0\23\32\1\0\7\32"+
    "\1\45\1\0\2\32\1\0\2\32\7\0\4\32\1\203"+
    "\3\32\7\0\23\32\1\0\7\32\1\45\1\0\2\32"+
    "\1\0\2\32\7\0\6\32\1\203\1\32\7\0\23\115"+
    "\1\0\7\115\1\142\1\0\2\115\1\0\1\115\1\32"+
    "\7\143\4\115\1\204\3\115\7\0\23\115\1\0\7\115"+
    "\1\142\1\0\2\115\1\0\1\115\1\32\7\143\6\115"+
    "\1\204\1\115\51\0\1\106\25\0\23\25\1\0\1\26"+
    "\5\25\1\205\1\45\1\0\1\30\1\25\1\31\1\32"+
    "\1\33\7\0\3\25\4\30\1\25\7\0\23\32\1\0"+
    "\7\32\1\45\1\0\2\206\1\0\2\32\7\0\3\32"+
    "\4\206\1\32\7\0\23\115\1\0\7\115\1\142\1\0"+
    "\2\207\1\0\1\115\1\32\7\143\3\115\4\207\1\115"+
    "\7\0\17\25\1\210\3\25\1\0\1\26\6\25\1\45"+
    "\1\0\1\30\1\25\1\31\1\32\1\33\7\0\3\25"+
    "\4\30\1\25\7\0\23\32\1\0\7\32\1\45\1\0"+
    "\2\211\1\0\2\32\7\0\3\32\4\211\1\32\7\0"+
    "\23\115\1\0\7\115\1\142\1\0\2\212\1\0\1\115"+
    "\1\32\7\143\3\115\4\212\1\115\7\0\3\25\1\213"+
    "\17\25\1\0\1\26\6\25\1\45\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\7\0"+
    "\23\25\1\0\1\26\6\25\1\126\1\0\1\30\1\25"+
    "\1\31\1\32\1\33\7\0\3\25\4\30\1\25\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\2\1\1\11\11\1\3\0"+
    "\10\1\3\0\1\1\1\0\1\1\4\0\3\1\2\0"+
    "\1\1\3\0\11\1\3\0\3\1\1\11\3\0\10\1"+
    "\3\0\1\1\1\0\1\1\1\0\1\1\2\0\1\1"+
    "\2\0\6\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\3\0\1\11\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\1\1\3\0\2\1\1\0\1\1\1\11"+
    "\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /* ############### */
    /* USER CODE START */
    /* ############### */

	private Token nextToken; 
    private String text;
    
    /**
     * Default constructor.
     */
    public Tokenizer() throws Exception {
        super();
        this.zzReader = new StringReader("");
        this.nextToken =null;
    }

    
    /**
     * Creates a new tokenizer.<br>
     * Try to reuse this tokenizer using the reinit method, since the creation of this class is expensive.
     * 
     * @param input the string to be tokenized
     */
    public Tokenizer(final String input) throws IOException, Exception {
        super();
        if (input == null) {
        	throw new NullPointerException("The tokenizer does not accept 'null' strings"); 
        }
        this.zzReader = new StringReader(input);
        this.nextToken = next_token(); 
        this.text = input;
    }


    /** @return true if the Tokenizer has more elements. */
    public boolean hasNext() {
        return this.nextToken != null; 
    }
    
    /**@return the next token*/
    public Token next() {
        if (this.nextToken == null) {
        	throw new NoSuchElementException(); 
        }
    	Token token = this.nextToken;
    	try { 
    		this.nextToken = next_token();
    	} catch (IOException e) {
    		throw new RuntimeException("Unable to fetch next token from stream", e); 
   		} 
    	return token; 
    }
    
    public void remove() {
    	throw new UnsupportedOperationException(); 
    }

    
    /** {@inheritDoc} */
    // @Override
    public void reInit(final String input) throws IOException {
    	StringReader stringReader = new StringReader(input);
        this.yyreset(stringReader);
        this.nextToken = next_token();
        this.text = input;
    }
    
    
    /** {@inheritDoc} */
    // @Override
    public void close() throws IOException {
        this.yyclose();
    }
    
    /** {@inheritDoc} */
    // @Override
    public String getTokenizedString() {
        return this.text;
    }

    /* ############# */
    /* USER CODE END */
    /* ############# */



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Tokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 278) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { Token t = new Token(yytext(), TokenType.HYPHENATION, yychar, (yylength() + yychar)); return t;
          }
        case 15: break;
        case 4: 
          { Token t = new Token(yytext(), TokenType.SENTENCEMARKER, yychar, (yylength() + yychar)); return t;
          }
        case 16: break;
        case 9: 
          { Token t = new Token(yytext(),TokenType.COMPOSITE, yychar, (yylength() + yychar)); return t;
          }
        case 17: break;
        case 1: 
          { Token t = new Token(yytext(), TokenType.SPECIALCHAR, yychar, (yylength() + yychar)); return t;
          }
        case 18: break;
        case 13: 
          { Token t = new Token("\"", TokenType.SPECIALCHAR, yychar, (yylength() + yychar)); return t;
          }
        case 19: break;
        case 3: 
          { ;
          }
        case 20: break;
        case 12: 
          { Token t = new Token("&", TokenType.SPECIALCHAR, yychar, (yylength() + yychar)); return t;
          }
        case 21: break;
        case 7: 
          { Token t = new Token(yytext(), TokenType.COMPOSITE, yychar, (yylength() + yychar)); return t;
          }
        case 22: break;
        case 11: 
          { Token t = new Token(yytext(), TokenType.COMPOSITE, yychar, (yylength() + yychar));  return t;
          }
        case 23: break;
        case 5: 
          { Token t = new Token(yytext(), TokenType.PUNCTUATION, yychar, (yylength() + yychar)); return t;
          }
        case 24: break;
        case 10: 
          { Token t = new Token(yytext(), TokenType.URL, yychar, (yylength() + yychar)); return t;
          }
        case 25: break;
        case 14: 
          { Token t = new Token(yytext().trim(), TokenType.DATE, yychar, (yylength() + yychar)); return t;
          }
        case 26: break;
        case 6: 
          { Token t = new Token(yytext(),TokenType.TERM, yychar, (yylength() + yychar)); return t;
          }
        case 27: break;
        case 2: 
          { Token t = new Token(yytext(), TokenType.TERM, yychar, (yylength() + yychar)); return t;
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
