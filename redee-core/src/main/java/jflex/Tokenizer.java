/* The following code was generated by JFlex 1.4.3 on 12.01.18 10:02 */

package jflex; 

import java.io.StringReader;
import java.io.IOException;
import java.util.Iterator;
import java.lang.NullPointerException;
import java.util.List;
import java.util.ArrayList;

import java.lang.UnsupportedOperationException;
import java.util.NoSuchElementException;
import com.scout24.redee.extraction.jflex.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12.01.18 10:02 from the specification file
 * <tt>/Users/dprawdzik/#Projects/Hackday/2018.Q1/0-Software/redee/redee-core/src/main/resources/jflex/Tokenizer.jflex</tt>
 */
public class Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\43\1\43\1\0\1\43\1\43\22\0\1\27\1\101\1\77"+
    "\1\74\1\0\1\53\1\54\1\46\2\0\1\0\1\0\1\100\1\50"+
    "\1\42\1\57\1\70\1\71\1\67\6\44\1\72\1\52\1\51\1\75"+
    "\1\55\1\76\1\56\1\53\1\60\1\31\1\12\1\25\1\23\1\34"+
    "\1\30\1\12\1\64\1\41\1\40\1\63\1\35\1\62\1\61\1\12"+
    "\1\12\1\12\1\26\1\12\1\24\3\12\1\12\1\12\4\0\1\47"+
    "\1\0\1\21\1\14\1\16\1\12\1\11\1\5\1\7\1\33\1\2"+
    "\1\12\1\36\1\3\1\1\1\4\1\6\1\22\1\73\1\17\1\32"+
    "\1\20\1\13\1\10\2\12\1\12\1\15\1\0\1\65\46\0\1\0"+
    "\3\0\1\0\30\0\27\37\1\0\7\37\1\66\27\37\1\0\112\37"+
    "\1\37\u051d\37\12\45\206\37\12\45\u026c\37\12\45\166\37\12\45\166\37"+
    "\12\45\166\37\12\45\166\37\12\45\167\37\11\45\166\37\12\45\166\37"+
    "\12\45\166\37\12\45\340\37\12\45\166\37\12\45\u0166\37\12\45\u0fb6\37"+
    "\254\0\1\0\u0f93\0\u0150\37\u0170\0\200\37\200\0\u092e\37\u10d2\0\u5200\37"+
    "\u5900\0\u0200\37\u0500\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\7\2\1\3\7\2\1\4\1\1\1\2"+
    "\1\5\1\1\4\2\2\1\2\2\1\6\1\7\3\0"+
    "\14\2\1\0\3\2\3\0\1\7\1\0\1\2\4\0"+
    "\4\2\6\0\1\6\3\0\1\2\1\10\14\2\1\0"+
    "\2\2\3\0\1\7\1\11\1\2\1\3\3\0\4\2"+
    "\4\0\1\12\2\7\1\13\1\2\2\0\2\2\1\0"+
    "\1\14\2\2\1\0\2\2\1\0\1\14\1\0\1\14"+
    "\1\2\2\0\1\3\2\0\4\2\1\0\1\14\2\0"+
    "\2\12\1\13\1\2\1\0\5\2\1\0\1\2\1\0"+
    "\2\2\1\0\1\12\3\0\1\15\1\0\3\2\1\14"+
    "\5\0\3\2\1\16\3\0\1\12\1\0\1\17\2\0"+
    "\3\2\1\0\1\14\2\0\2\12\3\0\2\2\1\20"+
    "\3\0\2\12\1\0\2\2\3\0\2\12\1\0\2\2"+
    "\1\0\4\20\1\0\1\14\1\2\14\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\102\0\u0462\0\u04a4\0\102\0\u04e6\0\u0528\0\u056a"+
    "\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u0672\0\u07bc"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566"+
    "\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\102\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u0738"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u06b4\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u207c\0\102\0\u2838\0\u287a\0\u28bc"+
    "\0\u28fe\0\102\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u2b0e\0\u06b4\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\102\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26"+
    "\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036"+
    "\0\u3078\0\102\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414"+
    "\0\u3456\0\u3498\0\u34da\0\u351c\0\u07fe\0\u355e\0\u1b12\0\u35a0"+
    "\0\u06f6\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\15\3\1\10"+
    "\1\11\1\12\1\7\1\13\1\3\1\14\1\15\1\16"+
    "\1\17\1\3\1\20\1\21\1\22\1\12\1\23\1\24"+
    "\1\25\1\2\3\25\1\2\1\26\1\2\1\22\1\2"+
    "\1\27\1\30\1\31\1\32\1\3\1\33\1\3\4\23"+
    "\1\3\1\2\1\34\2\2\1\25\1\22\103\0\26\35"+
    "\1\0\2\35\1\36\7\35\1\37\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\1\35\1\44\16\35\1\45\5\35\1\0"+
    "\2\35\1\36\7\35\1\37\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\17\35\1\46\6\35\1\0\2\35\1\36\7\35"+
    "\1\37\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\7\0\26\35\1\0"+
    "\2\35\1\36\1\47\6\35\1\37\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\16\35\1\50\7\35\1\0\2\35\1\36"+
    "\7\35\1\37\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\10\35"+
    "\1\51\15\35\1\0\2\35\1\36\7\35\1\37\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\10\35\1\52\15\35\1\0"+
    "\2\35\1\36\7\35\1\37\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\35\0\1\12\13\0\1\12\37\0\20\35\1\53\5\35"+
    "\1\0\2\35\1\36\7\35\1\37\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\17\35\1\54\6\35\1\0\2\35\1\36"+
    "\7\35\1\37\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\10\35"+
    "\1\55\15\35\1\0\2\35\1\36\7\35\1\37\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\20\35\1\56\5\35\1\0"+
    "\2\35\1\36\7\35\1\37\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\10\35\1\57\15\35\1\60\2\35\1\36\7\35"+
    "\1\37\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\7\0\10\35\1\57"+
    "\11\35\1\61\3\35\1\0\2\35\1\36\7\35\1\37"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\12\35\1\62\5\35"+
    "\1\63\5\35\1\0\2\35\1\36\7\35\1\37\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\26\40\1\64\12\40\1\65"+
    "\1\64\1\66\1\67\1\0\2\42\3\0\1\70\3\0"+
    "\5\40\1\0\1\40\4\66\1\40\7\0\26\35\1\64"+
    "\2\35\1\36\7\35\1\37\1\64\1\67\1\71\1\41"+
    "\1\42\1\43\3\0\1\70\3\0\5\35\1\0\1\35"+
    "\4\67\1\35\7\0\2\72\1\73\15\72\1\74\5\72"+
    "\1\0\7\72\1\0\2\72\2\0\1\72\13\0\5\72"+
    "\2\0\4\72\1\75\1\72\6\0\12\35\1\76\13\35"+
    "\1\0\2\35\1\36\7\35\1\37\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\26\35\1\0\2\35\1\36\1\47\2\35"+
    "\1\77\3\35\1\37\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\1\35\1\44\3\35\1\100\12\35\1\45\5\35\1\0"+
    "\2\35\1\36\7\35\1\37\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\5\35\1\101\20\35\1\0\2\35\1\36\7\35"+
    "\1\37\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\10\0\1\102\6\0"+
    "\1\103\5\0\1\104\1\0\1\105\61\0\26\106\1\0"+
    "\7\106\1\0\2\106\2\0\1\106\10\0\1\106\1\0"+
    "\1\107\5\106\2\0\5\106\7\0\26\35\1\0\2\35"+
    "\1\36\7\35\1\65\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\26\35\1\0\2\35\1\36\7\35\1\65\1\0\1\40"+
    "\1\35\1\110\1\42\1\43\7\0\5\35\1\0\1\35"+
    "\4\40\1\35\7\0\26\111\1\0\12\111\2\0\1\42"+
    "\1\111\12\0\5\111\1\0\1\111\4\42\1\111\7\0"+
    "\26\40\1\0\12\40\1\65\1\0\2\40\1\112\1\42"+
    "\1\113\7\0\5\40\1\0\6\40\7\0\26\114\1\0"+
    "\12\114\3\0\1\114\12\0\5\114\1\0\1\114\4\0"+
    "\1\114\7\0\26\42\1\0\12\42\1\65\1\0\2\42"+
    "\1\0\2\42\7\0\5\42\1\0\6\42\7\0\26\115"+
    "\1\0\12\115\1\65\1\0\1\113\1\115\1\0\2\42"+
    "\7\0\5\115\1\0\1\115\4\113\1\115\7\0\15\35"+
    "\1\116\10\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\26\35\1\0\2\35\1\36"+
    "\1\117\6\35\1\65\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\21\35\1\120\4\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\3\35\1\121\22\35"+
    "\1\0\2\35\1\36\7\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\5\35\1\122\20\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\14\35"+
    "\1\123\11\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\21\35\1\124\4\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\2\35\1\125\23\35\1\0\2\35\1\36\7\35"+
    "\1\65\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\7\0\17\35\1\126"+
    "\6\35\1\0\2\35\1\36\7\35\1\65\1\0\1\40"+
    "\1\35\1\41\1\42\1\43\7\0\5\35\1\0\1\35"+
    "\4\40\1\35\7\0\13\35\1\127\12\35\1\0\2\35"+
    "\1\36\7\35\1\65\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\1\35\1\130\24\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\1\35\1\131\24\35"+
    "\1\0\2\35\1\36\7\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\17\0\1\132\71\0\26\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\4\35\1\133\1\0\1\35\4\40\1\35\7\0"+
    "\2\35\2\56\22\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\3\35\1\134\22\35"+
    "\1\0\2\35\1\36\7\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\35\0\1\64\13\0\1\64\10\0\1\70\26\0"+
    "\26\135\1\0\12\135\2\0\1\42\1\135\12\0\5\135"+
    "\1\0\1\135\4\42\1\135\7\0\26\40\1\64\12\40"+
    "\1\136\1\64\1\137\1\140\1\0\2\42\3\0\1\70"+
    "\3\0\5\40\1\0\1\40\4\137\1\40\7\0\26\40"+
    "\1\64\12\40\1\136\1\64\2\140\1\112\1\42\1\113"+
    "\3\0\1\70\3\0\5\40\1\0\1\40\4\140\1\40"+
    "\35\0\1\70\13\0\1\70\2\141\21\0\4\141\10\0"+
    "\26\35\1\64\2\35\1\36\7\35\1\136\1\64\1\140"+
    "\1\142\1\41\1\42\1\43\3\0\1\70\3\0\5\35"+
    "\1\0\1\35\4\140\1\35\7\0\26\72\1\0\7\72"+
    "\1\0\2\72\2\0\1\72\4\0\1\143\6\0\5\72"+
    "\2\0\6\72\6\0\17\72\1\144\6\72\1\0\7\72"+
    "\1\0\2\72\2\0\1\72\4\0\1\143\6\0\5\72"+
    "\2\0\6\72\6\0\1\145\25\72\1\0\7\72\1\0"+
    "\2\72\2\0\1\72\4\0\1\143\6\0\5\72\2\0"+
    "\6\72\6\0\12\72\1\146\13\72\1\0\7\72\1\0"+
    "\2\72\2\0\1\72\4\0\1\143\6\0\5\72\2\0"+
    "\6\72\6\0\6\35\1\147\17\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\17\35"+
    "\1\150\6\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\7\35\1\151\16\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\6\35\1\152\17\35\1\0\2\35\1\36\7\35"+
    "\1\65\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\24\0\1\153\65\0"+
    "\1\154\105\0\1\155\126\0\1\156\47\0\26\106\1\0"+
    "\7\106\1\0\2\106\2\0\1\106\10\0\1\106\2\0"+
    "\5\106\2\0\5\106\2\0\1\143\4\0\26\157\1\0"+
    "\12\157\1\160\1\0\1\42\1\157\1\0\2\42\7\0"+
    "\5\157\1\0\1\157\4\42\1\157\7\0\26\161\1\0"+
    "\12\161\3\0\1\161\12\0\5\161\1\0\1\161\4\0"+
    "\1\161\7\0\26\162\1\0\12\162\1\65\1\0\1\113"+
    "\1\162\1\0\2\42\7\0\5\162\1\0\1\162\4\113"+
    "\1\162\7\0\26\114\1\0\2\114\1\163\7\114\2\0"+
    "\1\161\1\114\1\41\1\0\1\164\7\0\5\114\1\0"+
    "\1\114\4\161\1\114\7\0\26\115\1\0\12\115\1\65"+
    "\1\0\1\162\1\115\1\165\1\42\1\43\7\0\5\115"+
    "\1\0\1\115\4\162\1\115\7\0\26\35\1\0\2\35"+
    "\1\36\1\166\6\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\10\35\1\167\15\35\1\0\2\35\1\36\7\35"+
    "\1\65\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\7\0\26\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\1\0\1\170\5\0\5\35\1\0\1\35"+
    "\4\40\1\35\7\0\10\35\1\171\15\35\1\0\2\35"+
    "\1\36\7\35\1\65\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\26\35\1\0\2\35\1\36\7\35\1\65\1\0\1\40"+
    "\1\35\1\41\1\42\1\43\7\0\5\35\1\0\1\172"+
    "\4\40\1\35\7\0\10\35\1\173\15\35\1\0\2\35"+
    "\1\36\7\35\1\174\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\17\35\1\151\6\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\26\35\1\0\2\35"+
    "\1\36\3\35\1\175\3\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\21\35\1\176\4\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\16\35"+
    "\1\134\7\35\1\0\2\35\1\36\7\35\1\174\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\26\35\1\177\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\3\35"+
    "\1\200\22\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\35\0\1\201\53\0\26\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\2\35\1\202\2\35\1\0\1\35"+
    "\4\40\1\35\7\0\12\35\1\203\13\35\1\0\2\35"+
    "\1\36\7\35\1\65\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\26\157\1\0\12\157\1\65\1\0\1\42\1\157\1\0"+
    "\2\42\7\0\5\157\1\0\1\157\4\42\1\157\7\0"+
    "\26\135\1\0\12\135\2\0\1\204\1\205\12\0\5\135"+
    "\1\0\1\135\4\204\1\135\7\0\26\40\1\64\12\40"+
    "\1\65\1\64\1\137\1\140\1\0\2\42\3\0\1\70"+
    "\3\0\5\40\1\0\1\40\4\137\1\40\7\0\26\40"+
    "\1\64\12\40\1\65\1\64\2\140\1\112\1\42\1\113"+
    "\3\0\1\70\3\0\5\40\1\0\1\40\4\140\1\40"+
    "\52\0\2\141\21\0\4\141\10\0\26\35\1\64\2\35"+
    "\1\36\7\35\1\65\1\64\1\140\1\142\1\41\1\42"+
    "\1\43\3\0\1\70\3\0\5\35\1\0\1\35\4\140"+
    "\1\35\7\0\26\72\1\0\7\72\1\0\2\72\2\0"+
    "\1\72\4\0\1\206\6\0\5\72\2\0\6\72\6\0"+
    "\21\72\1\207\4\72\1\0\7\72\1\0\2\72\2\0"+
    "\1\72\4\0\1\143\6\0\5\72\2\0\6\72\6\0"+
    "\5\72\1\210\20\72\1\0\7\72\1\0\2\72\2\0"+
    "\1\72\4\0\1\143\6\0\5\72\2\0\6\72\6\0"+
    "\12\35\1\211\13\35\1\0\2\35\1\36\7\35\1\174"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\5\35\1\212\20\35"+
    "\1\0\2\35\1\36\7\35\1\174\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\10\35\1\213\15\35\1\0\2\35\1\36"+
    "\7\35\1\174\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\6\35"+
    "\1\214\17\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\41\0\1\215\52\0\1\216\163\0"+
    "\1\217\24\0\1\220\71\0\26\157\1\0\12\157\1\221"+
    "\1\0\2\157\1\0\1\157\1\42\7\222\5\157\1\0"+
    "\6\157\7\0\26\161\1\0\12\161\2\0\2\161\1\112"+
    "\1\0\1\164\7\0\5\161\1\0\6\161\7\0\26\162"+
    "\1\0\12\162\1\65\1\0\2\162\1\165\1\42\1\113"+
    "\7\0\5\162\1\0\6\162\7\0\26\114\1\0\2\114"+
    "\1\163\7\114\2\0\1\161\1\114\1\110\1\0\1\164"+
    "\7\0\5\114\1\0\1\114\4\161\1\114\7\0\26\223"+
    "\1\0\12\223\2\0\1\164\1\223\12\0\5\223\1\0"+
    "\1\223\4\164\1\223\7\0\26\223\1\0\12\223\3\0"+
    "\1\223\12\0\5\223\1\0\1\223\4\0\1\223\7\0"+
    "\17\35\1\171\6\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\14\35\1\224\11\35"+
    "\1\0\2\35\1\36\7\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\65\0\1\225\23\0\10\35\1\226\6\35\1\227"+
    "\6\35\1\0\2\35\1\36\7\35\1\65\1\0\1\40"+
    "\1\35\1\41\1\42\1\43\7\0\5\35\1\0\1\35"+
    "\4\40\1\35\7\0\1\230\25\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\26\135"+
    "\1\177\12\135\2\0\1\42\1\135\12\0\5\135\1\0"+
    "\1\135\4\42\1\135\7\0\5\35\1\231\20\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\26\35\1\0\2\35\1\232\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\1\0\1\170\5\0"+
    "\5\35\1\0\1\35\4\40\1\35\52\0\2\233\21\0"+
    "\4\233\10\0\10\35\1\234\15\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\10\0\1\235"+
    "\100\0\22\35\1\236\3\35\1\0\2\35\1\36\7\35"+
    "\1\65\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\7\0\20\35\1\237"+
    "\5\35\1\0\2\35\1\36\7\35\1\65\1\0\1\40"+
    "\1\35\1\41\1\42\1\43\7\0\5\35\1\0\1\35"+
    "\4\40\1\35\7\0\26\42\1\0\12\42\1\65\1\0"+
    "\2\240\1\0\2\42\7\0\5\42\1\0\1\42\4\240"+
    "\1\42\7\0\26\157\1\0\12\157\1\65\1\0\1\240"+
    "\1\241\1\0\2\42\7\0\5\157\1\0\1\157\4\240"+
    "\1\157\7\0\26\242\1\0\7\242\1\0\2\242\2\0"+
    "\1\242\7\0\1\243\1\242\1\0\1\244\5\242\2\0"+
    "\5\242\3\0\1\242\3\0\26\72\1\0\7\72\1\0"+
    "\2\72\2\0\1\72\4\0\1\245\6\0\5\72\2\0"+
    "\6\72\6\0\17\72\1\246\6\72\1\0\7\72\1\0"+
    "\2\72\2\0\1\72\4\0\1\143\6\0\5\72\2\0"+
    "\6\72\6\0\26\35\1\0\2\35\1\247\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\13\35\1\250\12\35"+
    "\1\0\2\35\1\36\7\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\1\212\25\35\1\0\2\35\1\36\7\35"+
    "\1\65\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\7\0\1\35\1\251"+
    "\24\35\1\0\2\35\1\36\7\35\1\65\1\0\1\40"+
    "\1\35\1\41\1\42\1\43\7\0\5\35\1\0\1\35"+
    "\4\40\1\35\26\0\1\252\72\0\1\253\101\0\1\254"+
    "\6\0\1\255\76\0\1\256\65\0\26\157\1\0\12\157"+
    "\1\222\1\0\2\157\1\0\1\222\1\0\7\222\5\157"+
    "\1\0\6\157\7\0\26\222\1\0\13\222\1\0\2\222"+
    "\1\0\1\222\1\0\14\222\1\0\6\222\7\0\26\223"+
    "\1\0\12\223\2\0\2\223\1\165\1\0\1\164\7\0"+
    "\5\223\1\0\6\223\7\0\12\35\1\171\13\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\65\0\1\257\23\0\3\35\1\260\22\35\1\0\2\35"+
    "\1\36\7\35\1\65\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\10\35\1\261\15\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\13\35\1\262\12\35"+
    "\1\0\2\35\1\36\7\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\3\35\1\263\22\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\26\35"+
    "\1\0\2\35\1\36\7\35\1\65\1\0\1\40\1\35"+
    "\1\110\1\42\1\43\1\0\1\170\5\0\5\35\1\0"+
    "\1\35\4\40\1\35\52\0\2\264\21\0\4\264\10\0"+
    "\3\35\1\171\12\35\1\171\7\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\35\0\1\265"+
    "\53\0\26\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\2\35\1\171"+
    "\2\35\1\0\1\35\4\40\1\35\7\0\16\35\1\130"+
    "\7\35\1\0\2\35\1\36\7\35\1\65\1\0\1\40"+
    "\1\35\1\41\1\42\1\43\7\0\5\35\1\0\1\35"+
    "\4\40\1\35\7\0\26\42\1\0\12\42\1\266\1\0"+
    "\2\42\1\0\2\42\7\0\5\42\1\0\6\42\7\0"+
    "\26\157\1\0\12\157\1\267\1\0\2\157\1\0\1\157"+
    "\1\42\7\222\5\157\1\0\6\157\7\0\26\242\1\0"+
    "\7\242\1\0\2\242\2\0\1\242\7\0\1\243\1\242"+
    "\2\0\5\242\2\0\5\242\3\0\1\242\11\0\1\270"+
    "\73\0\26\72\1\0\7\72\1\0\2\72\2\0\1\72"+
    "\4\0\1\271\6\0\5\72\2\0\6\72\6\0\17\35"+
    "\1\130\6\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\110\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\10\35\1\237\15\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\20\35\1\263\5\35\1\0\2\35\1\36\7\35"+
    "\1\65\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\12\0\1\252\12\0"+
    "\1\252\66\0\1\272\106\0\1\273\103\0\1\252\67\0"+
    "\26\42\1\0\12\42\2\0\2\42\12\0\5\42\1\0"+
    "\6\42\7\0\17\35\1\274\6\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\7\0\1\35"+
    "\1\275\24\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\10\35\1\276\15\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\52\0\2\277\21\0\4\277\13\0\1\300\76\0\26\135"+
    "\1\0\12\135\2\0\1\42\1\135\12\0\5\135\1\0"+
    "\1\135\1\301\1\42\1\302\1\42\1\135\7\0\26\157"+
    "\1\0\12\157\1\222\1\0\2\157\1\0\1\222\1\0"+
    "\7\222\5\157\1\0\1\157\1\303\1\157\1\304\2\157"+
    "\26\0\1\305\101\0\1\306\63\0\1\307\100\0\10\35"+
    "\1\310\15\35\1\0\2\35\1\36\7\35\1\65\1\0"+
    "\1\40\1\35\1\41\1\42\1\43\7\0\5\35\1\0"+
    "\1\35\4\40\1\35\7\0\2\35\1\171\23\35\1\0"+
    "\2\35\1\36\7\35\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\7\0\16\35\1\311\7\35\1\0\2\35\1\36\7\35"+
    "\1\65\1\0\1\40\1\35\1\41\1\42\1\43\7\0"+
    "\5\35\1\0\1\35\4\40\1\35\52\0\2\312\21\0"+
    "\4\312\36\0\1\313\53\0\26\42\1\0\12\42\1\65"+
    "\1\0\2\42\1\0\2\42\7\0\5\42\1\0\2\42"+
    "\1\314\3\42\7\0\26\42\1\0\12\42\1\65\1\0"+
    "\2\42\1\0\2\42\7\0\5\42\1\0\4\42\1\315"+
    "\1\42\7\0\26\157\1\0\12\157\1\221\1\0\2\157"+
    "\1\0\1\157\1\42\7\222\5\157\1\0\2\157\1\316"+
    "\3\157\7\0\26\157\1\0\12\157\1\221\1\0\2\157"+
    "\1\0\1\157\1\42\7\222\5\157\1\0\4\157\1\317"+
    "\1\157\57\0\1\143\41\0\1\320\73\0\1\252\77\0"+
    "\1\35\1\321\24\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\7\0\26\35\1\0\2\35"+
    "\1\36\6\35\1\322\1\65\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\17\0\1\323\71\0\26\42\1\0\12\42\1\65\1\0"+
    "\2\324\1\0\2\42\7\0\5\42\1\0\1\42\4\324"+
    "\1\42\7\0\26\42\1\0\12\42\1\65\1\0\2\325"+
    "\1\0\2\42\7\0\5\42\1\0\1\42\4\325\1\42"+
    "\7\0\26\157\1\0\12\157\1\221\1\0\2\326\1\0"+
    "\1\157\1\42\7\222\5\157\1\0\1\157\4\326\1\157"+
    "\7\0\26\157\1\0\12\157\1\221\1\0\2\327\1\0"+
    "\1\157\1\42\7\222\5\157\1\0\1\157\4\327\1\157"+
    "\10\0\1\330\100\0\2\35\1\331\23\35\1\0\2\35"+
    "\1\36\7\35\1\65\1\0\1\40\1\35\1\41\1\42"+
    "\1\43\7\0\5\35\1\0\1\35\4\40\1\35\7\0"+
    "\20\35\1\332\5\35\1\0\2\35\1\36\7\35\1\65"+
    "\1\0\1\40\1\35\1\41\1\42\1\43\7\0\5\35"+
    "\1\0\1\35\4\40\1\35\35\0\1\333\53\0\26\42"+
    "\1\0\12\42\1\65\1\0\2\334\1\0\2\42\7\0"+
    "\5\42\1\0\1\42\4\334\1\42\7\0\26\42\1\0"+
    "\12\42\1\65\1\0\2\335\1\0\2\42\7\0\5\42"+
    "\1\0\1\42\4\335\1\42\7\0\26\157\1\0\12\157"+
    "\1\221\1\0\2\336\1\0\1\157\1\42\7\222\5\157"+
    "\1\0\1\157\4\336\1\157\7\0\26\157\1\0\12\157"+
    "\1\221\1\0\2\337\1\0\1\157\1\42\7\222\5\157"+
    "\1\0\1\157\4\337\1\157\11\0\1\340\77\0\26\35"+
    "\1\0\2\35\1\341\7\35\1\65\1\0\1\40\1\35"+
    "\1\41\1\42\1\43\7\0\5\35\1\0\1\35\4\40"+
    "\1\35\7\0\3\35\1\342\22\35\1\0\2\35\1\36"+
    "\7\35\1\65\1\0\1\40\1\35\1\41\1\42\1\43"+
    "\7\0\5\35\1\0\1\35\4\40\1\35\12\0\1\252"+
    "\76\0\26\42\1\343\12\42\1\65\1\0\2\42\1\0"+
    "\2\42\7\0\5\42\1\0\6\42\7\0\26\157\1\343"+
    "\12\157\1\221\1\0\2\157\1\0\1\157\1\42\7\222"+
    "\5\157\1\0\6\157\40\0\1\252\50\0\26\35\1\0"+
    "\2\35\1\36\7\35\1\174\1\0\1\40\1\35\1\41"+
    "\1\42\1\43\7\0\5\35\1\0\1\35\4\40\1\35"+
    "\21\0\1\344\67\0\1\345\127\0\1\346\116\0\2\347"+
    "\21\0\4\347\53\0\2\350\21\0\4\350\61\0\1\351"+
    "\73\0\2\352\21\0\4\352\53\0\2\353\21\0\4\353"+
    "\36\0\1\354\76\0\1\355\110\0\1\356\65\0\1\357"+
    "\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14652];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\1\11\2\1\1\11\13\1\3\0"+
    "\14\1\1\0\3\1\3\0\1\1\1\0\1\1\4\0"+
    "\4\1\6\0\1\1\3\0\16\1\1\0\2\1\3\0"+
    "\3\1\1\11\3\0\4\1\4\0\5\1\2\0\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\2\0\4\1\1\0\1\1\2\0\4\1"+
    "\1\0\5\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\3\0\1\11\1\0\3\1\1\11\5\0\4\1\3\0"+
    "\1\1\1\0\1\11\2\0\3\1\1\0\1\1\2\0"+
    "\2\1\3\0\2\1\1\11\3\0\2\1\1\0\2\1"+
    "\3\0\2\1\1\0\2\1\1\0\4\1\1\0\2\1"+
    "\14\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /* ############### */
    /* USER CODE START */
    /* ############### */

	private Token nextToken; 
    private String text;
    
    /**
     * Default constructor.
     */
    public Tokenizer() throws Exception {
        super();
        this.zzReader = new StringReader("");
        this.nextToken =null;
    }

    
    /**
     * Creates a new tokenizer.<br>
     * Try to reuse this tokenizer using the reinit method, since the creation of this class is expensive.
     * 
     * @param input the string to be tokenized
     */
    public Tokenizer(final String input) throws IOException, Exception {
        super();
        if (input == null) {
        	throw new NullPointerException("The tokenizer does not accept 'null' strings"); 
        }
        this.zzReader = new StringReader(input);
        this.nextToken = next_token(); 
        this.text = input;
    }

    public List<Token> toList() {

        List<Token> tokens = new ArrayList<>();
        while(hasNext()) {
            Token next = next();
            tokens.add(next);
        }
        return tokens;
    }

       public List<Token> toList(String tokenType) {

            List<Token> tokens = new ArrayList<>();
            while(hasNext()) {
                Token next = next();
                if(next.getType().equals(tokenType))
                    tokens.add(next);
            }
            return tokens;
        }

    /** @return true if the Tokenizer has more elements. */
    public boolean hasNext() {
        return this.nextToken != null; 
    }
    
    /**@return the next token*/
    public Token next() {
        if (this.nextToken == null) {
        	throw new NoSuchElementException(); 
        }
    	Token token = this.nextToken;
    	try { 
    		this.nextToken = next_token();
    	} catch (IOException e) {
    		throw new RuntimeException("Unable to fetch next token from stream", e); 
   		} 
    	return token; 
    }
    
    public void remove() {
    	throw new UnsupportedOperationException(); 
    }

    
    /** {@inheritDoc} */
    // @Override
    public void reInit(final String input) throws IOException {
    	StringReader stringReader = new StringReader(input);
        this.yyreset(stringReader);
        this.nextToken = next_token();
        this.text = input;
    }
    
    
    /** {@inheritDoc} */
    // @Override
    public void close() throws IOException {
        this.yyclose();
    }
    
    /** {@inheritDoc} */
    // @Override
    public String getTokenizedString() {
        return this.text;
    }

    /* ############# */
    /* USER CODE END */
    /* ############# */



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Tokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 286) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { Token t = new Token(yytext(), TokenType.HYPHENATION, yychar, (yylength() + yychar)); return t;
          }
        case 18: break;
        case 4: 
          { Token t = new Token(yytext(), TokenType.SENTENCEMARKER, yychar, (yylength() + yychar)); return t;
          }
        case 19: break;
        case 9: 
          { Token t = new Token(yytext(),TokenType.COMPOSITE, yychar, (yylength() + yychar)); return t;
          }
        case 20: break;
        case 12: 
          { Token t = new Token(yytext(), TokenType.NEGATION, yychar, (yylength() + yychar)); return t;
          }
        case 21: break;
        case 17: 
          { Token t = new Token(yytext(), TokenType.APPOINTMENT, yychar, (yylength() + yychar)); return t;
          }
        case 22: break;
        case 1: 
          { Token t = new Token(yytext(), TokenType.SPECIALCHAR, yychar, (yylength() + yychar)); return t;
          }
        case 23: break;
        case 15: 
          { Token t = new Token("\"", TokenType.SPECIALCHAR, yychar, (yylength() + yychar)); return t;
          }
        case 24: break;
        case 3: 
          { ;
          }
        case 25: break;
        case 14: 
          { Token t = new Token(yytext(), TokenType.BALCONY, yychar, (yylength() + yychar)); return t;
          }
        case 26: break;
        case 13: 
          { Token t = new Token("&", TokenType.SPECIALCHAR, yychar, (yylength() + yychar)); return t;
          }
        case 27: break;
        case 7: 
          { Token t = new Token(yytext(), TokenType.COMPOSITE, yychar, (yylength() + yychar)); return t;
          }
        case 28: break;
        case 11: 
          { Token t = new Token(yytext(), TokenType.COMPOSITE, yychar, (yylength() + yychar));  return t;
          }
        case 29: break;
        case 5: 
          { Token t = new Token(yytext(), TokenType.PUNCTUATION, yychar, (yylength() + yychar)); return t;
          }
        case 30: break;
        case 10: 
          { Token t = new Token(yytext(), TokenType.URL, yychar, (yylength() + yychar)); return t;
          }
        case 31: break;
        case 16: 
          { Token t = new Token(yytext().trim(), TokenType.DATE, yychar, (yylength() + yychar)); return t;
          }
        case 32: break;
        case 6: 
          { Token t = new Token(yytext(),TokenType.TERM, yychar, (yylength() + yychar)); return t;
          }
        case 33: break;
        case 2: 
          { Token t = new Token(yytext(), TokenType.TERM, yychar, (yylength() + yychar)); return t;
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
